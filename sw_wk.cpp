//g++ sw_wk.cpp -o get_ws -lX11 && ./get_ws
//g++ sw_wk.cpp -std=c++17 -lX11 -lftxui-component -lftxui-dom -lftxui-screen -o sw_wk && ./sw_wk

#include <cstddef>
#include <ftxui/component/screen_interactive.hpp>
#include <ftxui/component/component.hpp>
#include <ftxui/dom/elements.hpp> 

#include <iostream>
#include <string>
#include <vector>
#include "json.hpp" // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É nlohmann/json

#include <cstdio>
#include <memory>
#include <array>
#include <regex>

// –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Å–µ–≤–¥–æ–Ω–∏–º nlohmann::json
using json = nlohmann::json;
using namespace ftxui;

// 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ "rect"
struct Rect {
    int x;
    int y;
    int width;
    int height;
};

// 2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
struct Workspace {
    long long id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º long long, —Ç.–∫. ID –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π
    int num;
    std::string name;
    bool visible;
    bool focused;
    Rect rect; // –í–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    std::string output;
    bool urgent;
};

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è JSON –≤ C++ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã) ---
// –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç nlohmann/json –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å JSON-–æ–±—ä–µ–∫—Ç—ã
// –≤ –≤–∞—à–∏ C++ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –ò—Ö –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ —Ç–æ–º –∂–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–º–µ–Ω, —á—Ç–æ –∏ json::parse
// –∏–ª–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º.

void from_json(const json& j, Rect& r) 
{
    j.at("x").get_to(r.x);
    j.at("y").get_to(r.y);
    j.at("width").get_to(r.width);
    j.at("height").get_to(r.height);
}

void from_json(const json& j, Workspace& w) 
{
    j.at("id").get_to(w.id);
    j.at("num").get_to(w.num);
    j.at("name").get_to(w.name);
    j.at("visible").get_to(w.visible);
    j.at("focused").get_to(w.focused);
    j.at("rect").get_to(w.rect); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç from_json –¥–ª—è Rect
    j.at("output").get_to(w.output);
    j.at("urgent").get_to(w.urgent);
}

std::string get_current_workspace_name() 
{
    std::array<char, 4096> buffer;
    std::string result;

    FILE* pipe = popen("i3-msg -t get_workspaces", "r");
    if (!pipe) return "ERROR: popen failed";

    while (fgets(buffer.data(), buffer.size(), pipe) != nullptr) 
    {
        result += buffer.data();
    }

    pclose(pipe);

    try 
    {
        // 1. –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç json
        json parsed_json = json::parse(result);

        // 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-–º–∞—Å—Å–∏–≤ –≤ std::vector<Workspace>
        // –ë–ª–∞–≥–æ–¥–∞—Ä—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º from_json, —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        std::vector<Workspace> workspaces_array = parsed_json.get<std::vector<Workspace>>();

        // –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ (std::vector) –æ–±—ä–µ–∫—Ç–æ–≤ Workspace
        // std::cout << "–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: " << workspaces_array.size() << std::endl;

        // –í—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        for (const auto& ws : workspaces_array) 
        {
            if (ws.focused == true) 
            {
                // std::cout << "-----------------------------------" << std::endl;
                // std::cout << "ID: " << ws.id << std::endl;
                // std::cout << "Num: " << ws.num << std::endl;
                // std::cout << "Name: " << ws.name << std::endl;
                // std::cout << "Visible: " << (ws.visible ? "true" : "false") << std::endl;
                // std::cout << "Focused: " << (ws.focused ? "true" : "false") << std::endl;
                // std::cout << "Rect: {x=" << ws.rect.x << ", y=" << ws.rect.y
                //           << ", width=" << ws.rect.width << ", height=" << ws.rect.height << "}" << std::endl;
                // std::cout << "Output: " << ws.output << std::endl;
                // std::cout << "Urgent: " << (ws.urgent ? "true" : "false") << std::endl;

                return std::to_string(ws.num);
            }
        }

    } catch (const json::exception& e) 
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
        std::cerr << "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " << e.what() << std::endl;
    } catch (const std::exception& e) 
    {
        // –ü—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏
        std::cerr << "–ü—Ä–æ—á–∞—è –æ—à–∏–±–∫–∞: " << e.what() << std::endl;
    }

    return "NOT FOUND";
}

void move_active_window_to_workspace(int number) 
{
    std::string cmd = "i3-msg move container to workspace " + std::to_string(number);
    system(cmd.c_str());
}

int main() 
{
    // std::string cmd = "i3-msg focus mode_toggle";
    // system(cmd.c_str());

    std::string activeWorkSpace = get_current_workspace_name();
    ScreenInteractive screen = ScreenInteractive::TerminalOutput();


    int selected = std::stoi(activeWorkSpace) - 1;

    std::vector<std::string> items = 
    {
        "Workspace: 1",
        "Workspace: 2",
        "Workspace: 3",
        "Workspace: 4",
        "Workspace: 5",
        "Workspace: 6",
        "Workspace: 7",
        "Workspace: 8",
        "Workspace: 9",
        "Workspace: 10",
    };

    // MenuOption option;
    // option.on_enter = [&] {
    //     std::string cmd = "i3-msg move container to workspace " + std::to_string(selected+1);
    //     system(cmd.c_str());

    //     cmd = "i3-msg workspace " + std::to_string(selected + 1);
    //     system(cmd.c_str());
    // };

    // Component menu = Menu(&items, &selected, option);

    // Component renderer = Renderer(menu, [&] {
    //     return vbox({
    //         text("Workspace List:") | bold,
    //         separator(),
    //         menu->Render(),
    //         separator(),
    //         text("Active: " + items[selected]) | color(Color::Green)
    //     }) | border;
    // });

    // ScreenInteractive screen = ScreenInteractive::TerminalOutput();
    // screen.Loop(renderer);


    //üëá —Å–æ–∑–¥–∞—ë–º –æ–ø—Ü–∏–∏ —Å on_change
    // MenuOption option;
    // option.on_change = [&] 
    // {

    //     std::string cmd = "i3-msg move container to workspace " + std::to_string(selected+1);
    //     system(cmd.c_str());
        
    //     // –ü—Ä–∏–º–µ—Ä: –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ i3
    //     cmd = "i3-msg workspace " + std::to_string(selected + 1);
    //     system(cmd.c_str());
    // };

    // Component menu = Menu(&items, &selected, option);

    // Component renderer = Renderer(menu, [&] 
    // {
    //     return vbox({
    //         text("Workspace List:") | bold,
    //         separator(),
    //         menu->Render() | color(Color::GrayLight) | bold | color(Color::GrayLight),
    //         separator(),
    //         text("Active: " + items[selected]) | color(Color::Green)
    //     }); //| frame | border | size(HEIGHT, LESS_THAN, 100);
    // });

    // ScreenInteractive screen = ScreenInteractive::TerminalOutput();
    // screen.Loop(renderer);

    // –°–æ–∑–¥–∞—ë–º —Å–≤–æ–π Menu –≤—Ä—É—á–Ω—É—é
    Component menu = Renderer([&] {
        Elements entries;
        for (int i = 0; i < items.size(); ++i) {
            bool is_selected = (i == selected);
            auto style = is_selected 
                ? color(Color::Black) | bgcolor(Color::Cyan) | bold | frame // –ë–µ–∑ —Ä–∞–º–∫–∏
                : color(Color::GrayLight);
            entries.push_back(text(items[i]) | style);
        }

        return vbox(std::move(entries));
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
    menu = CatchEvent(menu, [&](Event event) {
        if (event == Event::Character('q') || event == Event::Character('Q') || event == Event::Character('–π') || event == Event::Character('–ô')) {
            screen.Exit(); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            return 1;   // –°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        }
        if (event == Event::ArrowUp && selected > 0) {
            selected--;

            std::string cmd = "i3-msg move container to workspace " + std::to_string(selected+1);
            system(cmd.c_str());

            cmd = "i3-msg workspace " + std::to_string(selected+1);
            system(cmd.c_str());

            return 1;
        }
        if (event == Event::ArrowDown && selected < (int)items.size() - 1) {
            selected++;

            std::string cmd = "i3-msg move container to workspace " + std::to_string(selected+1);
            system(cmd.c_str());

            cmd = "i3-msg workspace " + std::to_string(selected+1);
            system(cmd.c_str());

            return 1;
        }
        return 0;

    });

    Component renderer = Renderer(menu, [&] 
    {
        return vbox({
            text("Workspace List:") | bold | color(Color::MagentaLight) | size(HEIGHT, LESS_THAN, 100) ,
            separator(),
            menu->Render() | bold | color(Color::GrayLight),
            separator(),
            text("Active: " + items[selected]) | color(Color::GreenLight)
        }) | frame | border | size(HEIGHT, LESS_THAN, 100);
    });

    screen.Loop(renderer);
}